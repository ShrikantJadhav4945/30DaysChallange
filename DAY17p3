import java.util.*;

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        // Step 1: Count the frequency of each word
        Map<String, Integer> frequencyMap = new HashMap<>();
        for (String word : words) {
            frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);
        }

        // Step 2: Use a priority queue to sort by frequency and lexicographical order
        PriorityQueue<String> minHeap = new PriorityQueue<>((a, b) -> {
            int freqCompare = frequencyMap.get(a) - frequencyMap.get(b);
            if (freqCompare == 0) {
                // If frequencies are the same, sort lexicographically in reverse
                return b.compareTo(a);
            }
            return freqCompare;
        });

        // Add words to the heap
        for (String word : frequencyMap.keySet()) {
            minHeap.offer(word);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }

        // Step 3: Extract words from the heap and build the result list
        List<String> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll());
        }
        // Reverse the result since we need the most frequent words first
        Collections.reverse(result);
        return result;
    }
}
