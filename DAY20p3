import java.util.*;

class Solution {
    public int[] smallestTrimmedNumbers(String[] nums, int[][] queries) {
        int n = nums.length; // Number of numbers
        int q = queries.length; // Number of queries
        int[] result = new int[q];

        // Process each query
        for (int i = 0; i < q; i++) {
            int k = queries[i][0]; // k-th smallest number
            int trim = queries[i][1]; // Number of digits to trim
            
            // Create a list of pairs: [trimmed number, original index]
            List<String[]> trimmed = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                String trimmedNum = nums[j].substring(nums[j].length() - trim);
                trimmed.add(new String[]{trimmedNum, String.valueOf(j)});
            }

            // Sort the trimmed numbers lexicographically, breaking ties by original index
            trimmed.sort((a, b) -> {
                int cmp = a[0].compareTo(b[0]);
                return cmp != 0 ? cmp : Integer.compare(Integer.parseInt(a[1]), Integer.parseInt(b[1]));
            });

            // Find the k-th smallest number (1-indexed)
            result[i] = Integer.parseInt(trimmed.get(k - 1)[1]);
        }
        
        return result;
    }
}

