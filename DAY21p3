class Solution {
    public int countPairs(TreeNode root, int distance) {
        int[] result = new int[1]; // Use array to store count (pass-by-reference)
        dfs(root, distance, result);
        return result[0];
    }

    private int[] dfs(TreeNode node, int distance, int[] result) {
        if (node == null) return new int[distance + 1];

        if (node.left == null && node.right == null) { 
            // If it's a leaf, return array with 1 at distance 1
            int[] leafArr = new int[distance + 1];
            leafArr[1] = 1;
            return leafArr;
        }

        int[] left = dfs(node.left, distance, result);
        int[] right = dfs(node.right, distance, result);

        // Count valid leaf pairs
        for (int i = 1; i <= distance; i++) {
            for (int j = 1; j <= distance - i; j++) {
                result[0] += left[i] * right[j]; // Pairing leaves from left and right
            }
        }

        // Prepare current node's distance array
        int[] curr = new int[distance + 1];
        for (int i = 1; i < distance; i++) {
            curr[i + 1] = left[i] + right[i]; // Shift distances by 1
        }

        return curr;
    }
}
