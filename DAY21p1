class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak = findPeak(mountainArr);
        
        // Try searching in the increasing half
        int index = binarySearch(mountainArr, target, 0, peak, true);
        if (index != -1) return index;

        // If not found, search in the decreasing half
        return binarySearch(mountainArr, target, peak + 1, mountainArr.length() - 1, false);
    }

    // Binary search to find the peak of the mountain array
    private int findPeak(MountainArray mountainArr) {
        int left = 0, right = mountainArr.length() - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
                left = mid + 1;  // Move towards the peak
            } else {
                right = mid;  // Peak might be at mid
            }
        }
        return left;  // Peak index
    }

    // Standard binary search (ascending or descending based on the flag)
    private int binarySearch(MountainArray mountainArr, int target, int left, int right, boolean ascending) {
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midValue = mountainArr.get(mid);

            if (midValue == target) return mid;
            
            if (ascending) { // Increasing order
                if (midValue < target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            } else { // Decreasing order
                if (midValue > target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
}
