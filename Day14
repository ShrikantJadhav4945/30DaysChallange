class Solution {
    public int stoneGameVI(int[] aliceValues, int[] bobValues) {
        int n = aliceValues.length;
        
        // Create an array of tuples (sum of aliceValue[i] + bobValue[i], index)
        int[][] combinedValues = new int[n][2];
        for (int i = 0; i < n; i++) {
            combinedValues[i][0] = aliceValues[i] + bobValues[i];  // Combined value
            combinedValues[i][1] = i;  // Index to keep track of the original stone
        }
        
        // Sort combined values by the sum in descending order
        Arrays.sort(combinedValues, (a, b) -> b[0] - a[0]);
        
        // Simulate the game with Alice and Bob picking stones alternately
        int aliceScore = 0;
        int bobScore = 0;
        
        for (int i = 0; i < n; i++) {
            int index = combinedValues[i][1];
            if (i % 2 == 0) {
                // Alice's turn: Add the value of the current stone for Alice
                aliceScore += aliceValues[index];
            } else {
                // Bob's turn: Add the value of the current stone for Bob
                bobScore += bobValues[index];
            }
        }
        
        // Determine the result
        if (aliceScore > bobScore) {
            return 1;  // Alice wins
        } else if (bobScore > aliceScore) {
            return -1;  // Bob wins
        } else {
            return 0;  // It's a draw
        }
    }
}
