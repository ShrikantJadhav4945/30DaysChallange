import java.util.PriorityQueue;

class Solution {
    public int maximumProduct(int[] nums, int k) {
        // Define the modulo value
        final int MOD = 1000000007;
        
        // Use a min-heap (priority queue) to always get the smallest element
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        // Add all elements of the array to the min-heap
        for (int num : nums) {
            minHeap.offer(num);
        }
        
        // Perform k operations to maximize the product
        for (int i = 0; i < k; i++) {
            // Extract the smallest element from the heap
            int smallest = minHeap.poll();
            
            // Increment the smallest element by 1
            smallest++;
            
            // Push the incremented element back into the heap
            minHeap.offer(smallest);
        }
        
        // Calculate the product of all elements in the heap
        long product = 1;
        while (!minHeap.isEmpty()) {
            product = (product * minHeap.poll()) % MOD;
        }
        
        // Return the result
        return (int) product;
    }
}
