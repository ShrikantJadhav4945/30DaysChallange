class Solution {
    private int rows, cols;

    public int minDays(int[][] grid) {
        rows = grid.length;
        cols = grid[0].length;

        // Check if grid is already disconnected
        if (isDisconnected(grid)) {
            return 0;
        }

        // Check if removing one cell disconnects the grid
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0; // Temporarily remove the cell
                    if (isDisconnected(grid)) {
                        return 1;
                    }
                    grid[i][j] = 1; // Restore the cell
                }
            }
        }

        // If neither of the above works, the answer is 2
        return 2;
    }

    private boolean isDisconnected(int[][] grid) {
        boolean[][] visited = new boolean[rows][cols];
        int components = 0;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    if (components > 0) {
                        return true; // More than one component found
                    }
                    dfs(grid, i, j, visited);
                    components++;
                }
            }
        }
        return components == 0; // If no land found, it's disconnected
    }

    private void dfs(int[][] grid, int x, int y, boolean[][] visited) {
        if (x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0 || visited[x][y]) {
            return;
        }

        visited[x][y] = true;

        dfs(grid, x + 1, y, visited);
        dfs(grid, x - 1, y, visited);
        dfs(grid, x, y + 1, visited);
        dfs(grid, x, y - 1, visited);
    }
}
