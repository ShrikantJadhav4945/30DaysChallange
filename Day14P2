import java.util.PriorityQueue;

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // Create a priority queue that orders nodes by their value
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);

        // Initialize the priority queue with the head of each list
        for (ListNode list : lists) {
            if (list != null) {
                pq.offer(list);
            }
        }

        // Dummy node to serve as the start of the merged list
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        // Merge the lists by repeatedly extracting the smallest node from the priority queue
        while (!pq.isEmpty()) {
            // Extract the smallest node
            ListNode node = pq.poll();
            
            // Attach the node to the merged list
            current.next = node;
            current = current.next;

            // If there is another node in the same list, add it to the priority queue
            if (node.next != null) {
                pq.offer(node.next);
            }
        }

        // Return the merged list, which starts from the next of dummy node
        return dummy.next;
    }
}
